"""stress_sha tester"""

import time
import os
import hashlib
import faker
import random
import sqlite3


FOLDER = "benchmark_tests_python"  # folder to store files generated by the tests
# DO NOT USE / OR /* AS FOLDER, IT WILL DELETE EVERYTHING IN YOUR SYSTEM.
# I AM NOT RESPONSIBLE FOR ANY DAMAGE CAUSED BY THIS CODE.
# IF YOUR COMPUTER EXPLODES, WOMP WOMP, THAT SUCKS.

# tests


def init():
    """initialize the test"""
    # create folder if it doesn't exist
    if not os.path.exists(FOLDER):
        os.makedirs(FOLDER)

def end():
    """end the test"""
    # remove folder and its content
    os.system(f"rm -rf {FOLDER}" if FOLDER != "/" or FOLDER != "/*" else "echo why?")  # scary!

def test_sqlite3():
    """one SQLite3 test, creating a database and reading from it"""
    start = time.time()
    # create a database
    conn = sqlite3.connect(os.path.join(FOLDER, "test.db"))
    c = conn.cursor()
    # create a table
    c.execute("""CREATE TABLE if not exists test (
    id integer primary key, 
    name text,
    age integer,
    quote text
    )
    """)
    conn.commit()
    conn.close()
    # open the database
    conn = sqlite3.connect(os.path.join(FOLDER, "test.db"))
    c = conn.cursor()
    # insert data
    age = random.randint(1, 100)
    name = faker.Faker().name()
    quote = faker.Faker().sentence()
    c.execute("INSERT INTO test (name, age, quote) VALUES (?, ?, ?)", (name, age, quote))
    # read the latest data from the table
    c.execute("SELECT * FROM test ORDER BY id DESC LIMIT 1")
    data = c.fetchone()
    # close connection
    conn.commit()
    conn.close()
    end = time.time()
    elapsed = round(end - start, 4)
    print(f"wrote and read sqlite3 (data: {data}): {elapsed}s")
    return elapsed


def test_io(file: str):
    """one test_io, reading & writing to a file"""
    start = time.time()
    fake = faker.Faker()
    data = fake.text()
    # writing
    with open(file, "w") as f:
        f.write(data)
    # reading
    with open(file, "r") as f:
        f.read()
    end = time.time()
    elapsed = round(end - start, 4)
    print(f"{file}: {data} ({elapsed}s)")
    return elapsed

def test_sha():
    """one test_sha, hashing a string"""
    start = time.time()
    # fake data
    fake = faker.Faker()
    data = fake.text()
    # hashing
    hash = hashlib.sha256(data.encode()).hexdigest()
    end = time.time()
    print(f"{data}: {hash} ({end - start}s)")
    elapsed = round(end - start, 4)
    return elapsed

# stress tests (benchmarking)

def stress_sqlite3(stime: int = 60):
    """
    run as many test_sqlite3 as possible in X seconds
    """
    score = 0
    elapsed_list = []
    # for X seconds, do as many tests as possible
    s = time.time()
    while time.time() - s < stime:
      elapsed = test_sqlite3()
      elapsed_list.append(elapsed)
      score += 1

    # average
    avg = sum(elapsed_list) / len(elapsed_list)

    return score, avg, elapsed_list

def stress_io(stime: int = 60):
    """
    run as many test_io as possible in X seconds
    """
    score = 0
    elapsed_list = []
    # for X seconds, do as many tests as possible
    s = time.time()
    while time.time() - s < stime:
      elapsed = test_io(os.path.join(FOLDER, f"testio.txt"))
      elapsed_list.append(elapsed)
      score += 1

    # average
    avg = sum(elapsed_list) / len(elapsed_list)

    return score, avg, elapsed_list


def stress_sha(stime: int = 60):
    """
    run as many test_sha as possible in X seconds
    """
    score = 0
    elapsed_list = []
    # for X seconds, do as many tests as possible
    s = time.time()
    while time.time() - s < stime:
      elapsed = test_sha()
      elapsed_list.append(elapsed)
      score += 1

    # average
    avg = sum(elapsed_list) / len(elapsed_list)

    return score, avg, elapsed_list

# main function

def main(stime: int = 60):
    """main function"""
    # stress test
    init()
    score_sqlite3, avg_sqlite3, list_sqlite3 = stress_sqlite3(stime)
    score_io, avg_io, list_io = stress_io(stime)
    score_sha, avg_sha, list_sha = stress_sha(stime)
    end()
    # check for term variable
    if "TERM" in os.environ:
      os.system('cls' if os.name == 'nt' else 'clear')
    else:
      print("\n" * 100)  # backup plan
    # print results
    print("sqlite3:")
    print(f"score: {score_sqlite3}, avg: {avg_sqlite3}")
    print("=" * 20)
    print("io:")
    print(f"score: {score_io}, avg: {avg_io}")
    print("=" * 20)
    print("sha256:")
    print(f"score: {score_sha}, avg: {avg_sha}")

if __name__ == "__main__":
    main()
